import Order from "../../models/Order.model.js";
import Store from "../../models/Store.model.js";
import User from "../../models/User.model.js";

// Helper function ƒë·ªÉ x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n ·∫£nh
function processImagePath(imagePath) {
  if (!imagePath) return null;
  if (imagePath.startsWith('http')) return imagePath;
  return `${process.env.BASE_URL || 'http://localhost:5000'}/${imagePath}`;
}

//! L·∫•y ƒë∆°n h√†ng c·ªßa c·ª≠a h√†ng
export const getMyStoreOrders = async (req, res) => {
    try {
      // Ch·ªâ cho manager
      if (req.user.role !== "storeManager") {
        return res.status(403).json({
          success: false,
          message: "Ch·ªâ c√≥ manager m·ªõi ƒë∆∞·ª£c truy c·∫≠p",
        });
      }
  
      const managerId = req.user.userId || req.user._id;
      const store = await Store.findOne({ manager: managerId }).lean();
      if (!store) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho manager n√†y",
        });
      }
  
      const {
        page = 1,
        limit = 10,
        status = "",
        paymentStatus = "",
        search = "",
        sortBy = "newest",
        startDate = "",
        endDate = "",
      } = req.query;
  
      const pageNum = parseInt(page);
      const limitNum = parseInt(limit);
      const skip = (pageNum - 1) * limitNum;
  
      const filter = { storeId: store._id };
  
      if (status && status !== "all") filter.status = status;
      if (paymentStatus && paymentStatus !== "all") filter.paymentStatus = paymentStatus;
  
      if (search) {
        filter.$or = [
          { orderNumber: { $regex: search, $options: "i" } },
          { "customerInfo.name": { $regex: search, $options: "i" } },
          { "customerInfo.email": { $regex: search, $options: "i" } },
          { "shippingAddress.phone": { $regex: search, $options: "i" } },
        ];
      }
  
      if (startDate || endDate) {
        filter.createdAt = {};
        if (startDate) filter.createdAt.$gte = new Date(startDate);
        if (endDate) filter.createdAt.$lte = new Date(endDate);
      }
  
      // Sort
      let sort = {};
      switch (sortBy) {
        case "oldest": sort.createdAt = 1; break;
        case "amount_asc": sort.finalAmount = 1; break;
        case "amount_desc": sort.finalAmount = -1; break;
        default: sort.createdAt = -1;
      }
  
      const orders = await Order.find(filter)
        .sort(sort)
        .skip(skip)
        .limit(limitNum)
        .populate({
          path: "items.productId",
          select: "name images status price",
          options: { strictPopulate: false }
        })
        .populate("storeId", "storeName storeCode")
        .lean();
  
      // X·ª≠ l√Ω image, topping v√† subtotal
      const processedOrders = orders.map((order) => {
        const items = order.items.map((item) => {
          // S·ª≠ d·ª•ng image t·ª´ item tr·ª±c ti·∫øp (ƒë√£ ƒë∆∞·ª£c l∆∞u khi t·∫°o ƒë∆°n h√†ng)
          const productImage = item.image || item.productId?.images?.[0];
          const productName = item.productName || item.productId?.name || "S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh";
          const price = item.price || item.productId?.price || 0;
          const quantity = item.quantity || 1;
          
          return {
            ...item,
            productName,
            price,
            quantity,
            image: processImagePath(productImage),
            subtotal: price * quantity,
            toppings: item.toppings || [],
          };
        });
  
        return {
          ...order,
          items,
          // ƒê·∫£m b·∫£o customerInfo c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
          customerInfo: {
            name: order.customerInfo?.name || "Kh√¥ng x√°c ƒë·ªãnh",
            email: order.customerInfo?.email || "",
            phone: order.shippingAddress?.phone || ""
          }
        };
      });
  
      const totalOrders = await Order.countDocuments(filter);
      const totalPages = Math.ceil(totalOrders / limitNum);
  
      res.status(200).json({
        success: true,
        message: "L·∫•y danh s√°ch ƒë∆°n h√†ng c·ª≠a h√†ng th√†nh c√¥ng",
        data: {
          storeInfo: {
            storeName: store.storeName,
            storeCode: store.storeCode,
          },
          orders: processedOrders,
          pagination: {
            currentPage: pageNum,
            totalPages,
            totalOrders,
            hasNextPage: pageNum < totalPages,
            hasPrevPage: pageNum > 1,
            limit: limitNum,
          },
        },
      });
    } catch (error) {
      console.error("L·ªói khi l·∫•y ƒë∆°n h√†ng c·ª≠a h√†ng:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y ƒë∆°n h√†ng c·ª≠a h√†ng",
        error: error.message,
      });
    }
  };

//! Xem chi ti·∫øt ƒë∆°n h√†ng
export const getOrderDetail = async (req, res) => {
  try {
    const { orderId } = req.params;
    const managerId = req.user.userId || req.user._id;

    console.log("üîç Getting order detail for:", { orderId, managerId });

    // T√¨m c·ª≠a h√†ng c·ªßa manager
    const store = await Store.findOne({ manager: managerId });
    if (!store) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho manager n√†y"
      });
    }

    // T√¨m ƒë∆°n h√†ng v√† ki·ªÉm tra xem c√≥ thu·ªôc c·ª≠a h√†ng n√†y kh√¥ng
    const order = await Order.findById(orderId)
      .populate({
        path: "items.productId",
        select: "name images status price description"
      })
      .populate("storeId", "storeName storeCode address phone")
      .populate("customerId", "name email phoneNumber")
      .lean();

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
      });
    }

    // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ thu·ªôc c·ª≠a h√†ng c·ªßa manager kh√¥ng
    if (order.storeId._id.toString() !== store._id.toString()) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒë∆°n h√†ng n√†y"
      });
    }

    // X·ª≠ l√Ω h√¨nh ·∫£nh v√† t√≠nh to√°n subtotal
    const processedOrder = {
      ...order,
      items: order.items.map(item => {
        const productImage = item.image || item.productId?.images?.[0];
        const productName = item.productName || item.productId?.name || "S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh";
        const price = item.price || item.productId?.price || 0;
        const quantity = item.quantity || 1;
        
        return {
          ...item,
          productName,
          price,
          quantity,
          image: productImage,
          subtotal: price * quantity,
          toppings: item.toppings || []
        };
      })
    };

    res.status(200).json({
      success: true,
      message: "L·∫•y chi ti·∫øt ƒë∆°n h√†ng th√†nh c√¥ng",
      data: processedOrder
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng",
      error: error.message
    });
  }
};
//! C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng - FIXED HO√ÄN TO√ÄN
export const updateOrderStatus = async (req, res) => {
    try {
      const { orderId } = req.params;
      const { status, note = "" } = req.body;
      const managerId = req.user.userId || req.user._id;
  
      console.log("üîÑ Updating order status:", { orderId, status, managerId });
  
      // Validate status
      const validStatuses = ["finding_driver", "picking_up", "delivering", "delivered", "cancelled"];
      if (!validStatuses.includes(status)) {
        return res.status(400).json({
          success: false,
          message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá"
        });
      }
  
      // T√¨m c·ª≠a h√†ng c·ªßa manager
      const store = await Store.findOne({ manager: managerId });
      if (!store) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho manager n√†y"
        });
      }
  
      // T√¨m ƒë∆°n h√†ng
      const order = await Order.findById(orderId);
      if (!order) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
        });
      }
  
      // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ thu·ªôc c·ª≠a h√†ng c·ªßa manager kh√¥ng
      if (order.storeId.toString() !== store._id.toString()) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t ƒë∆°n h√†ng n√†y"
        });
      }
  
      // Ki·ªÉm tra n·∫øu ƒëang c·ªë g·∫Øng h·ªßy ƒë∆°n h√†ng th√¨ ph·∫£i d√πng h√†m cancelOrder
      if (status === "cancelled") {
        return res.status(400).json({
          success: false,
          message: "Vui l√≤ng s·ª≠ d·ª•ng API h·ªßy ƒë∆°n h√†ng ƒë·ªÉ h·ªßy ƒë∆°n"
        });
      }
  
      // L∆∞u tr·∫°ng th√°i c≈© ƒë·ªÉ ki·ªÉm tra
      const oldStatus = order.status;
  
      // ‚úÖ T·∫†O NOTE TH√îNG MINH - KH√îNG ƒê·ªÇ H·ªÜ TH·ªêNG T·ª∞ T·∫†O B·∫¢N GHI
      let finalNote = note;
      if (!finalNote) {
        // S·ª≠ d·ª•ng note ti·∫øng Vi·ªát thay v√¨ ƒë·ªÉ h·ªá th·ªëng t·∫°o note ti·∫øng Anh
        const statusText = {
          'finding_driver': 'ƒëang t√¨m t√†i x·∫ø',
          'picking_up': 'ƒëang l·∫•y h√†ng', 
          'delivering': 'ƒëang giao h√†ng',
          'delivered': 'ƒë√£ giao h√†ng'
        }[status] || status;
        
        finalNote = `C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh ${statusText}`;
      }
  
      const currentTimestamp = new Date();
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      order.status = status;
      
      // T·ª± ƒë·ªông c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n n·∫øu ƒë∆°n h√†ng ƒë√£ giao
      let paymentStatusChanged = false;
      if (status === "delivered" && order.paymentMethod === "cod" && order.paymentStatus !== "paid") {
        order.paymentStatus = "paid";
        paymentStatusChanged = true;
        
        // Th√™m th√¥ng tin thanh to√°n v√†o note hi·ªán t·∫°i
        finalNote += " | ƒê√£ t·ª± ƒë·ªông x√°c nh·∫≠n thanh to√°n COD";
      }
  
      // ‚úÖ CH·ªà PUSH 1 B·∫¢N GHI DUY NH·∫§T - KH√îNG C√ì B·∫¢N GHI T·ª∞ ƒê·ªòNG
      order.statusHistory.push({
        status: status,
        paymentStatus: order.paymentStatus,
        timestamp: currentTimestamp,
        note: finalNote,
        updatedBy: managerId
      });
  
      await order.save();
  
      res.status(200).json({
        success: true,
        message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng",
        data: {
          orderId: order._id,
          orderNumber: order.orderNumber,
          oldStatus,
          newStatus: status,
          paymentStatus: order.paymentStatus,
          paymentStatusChanged
        }
      });
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng",
        error: error.message
      });
    }
  };

//! C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
export const updatePaymentStatus = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { paymentStatus, note = "" } = req.body;
    const managerId = req.user.userId || req.user._id;


    console.log("üí∞ Updating payment status:", { orderId, paymentStatus, managerId });

    // Validate payment status
    const validPaymentStatuses = ["pending", "paid", "failed", "refunded"];
    if (!validPaymentStatuses.includes(paymentStatus)) {
      return res.status(400).json({
        success: false,
        message: "Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá"
      });
    }

    // T√¨m c·ª≠a h√†ng c·ªßa manager
    const store = await Store.findOne({ manager: managerId });
    if (!store) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho manager n√†y"
      });
    }

    // T√¨m ƒë∆°n h√†ng
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
      });
    }

    // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ thu·ªôc c·ª≠a h√†ng c·ªßa manager kh√¥ng
    if (order.storeId.toString() !== store._id.toString()) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t ƒë∆°n h√†ng n√†y"
      });
    }

    // L∆∞u tr·∫°ng th√°i thanh to√°n c≈©
    const oldPaymentStatus = order.paymentStatus;

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
    order.paymentStatus = paymentStatus;

    // Th√™m v√†o l·ªãch s·ª≠
    order.statusHistory.push({
      status: order.status,
      paymentStatus: paymentStatus,
      timestamp: new Date(),
      note: note || `Tr·∫°ng th√°i thanh to√°n thay ƒë·ªïi t·ª´ ${oldPaymentStatus} sang ${paymentStatus}`,
      updatedBy: managerId
    });

    await order.save();

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng",
      data: {
        orderId: order._id,
        orderNumber: order.orderNumber,
        oldPaymentStatus,
        newPaymentStatus: paymentStatus,
        orderStatus: order.status
      }
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n",
      error: error.message
    });
  }
};

//! H·ªßy ƒë∆°n h√†ng
export const cancelOrder = async (req, res) => {
  try {
    const { orderId } = req.params;
    const { reason } = req.body;
    const managerId = req.user.userId || req.user._id;


    console.log("‚ùå Canceling order:", { orderId, reason, managerId });

    // Validate reason
    if (!reason || reason.trim() === "") {
      return res.status(400).json({
        success: false,
        message: "Vui l√≤ng cung c·∫•p l√Ω do h·ªßy ƒë∆°n h√†ng"
      });
    }

    // T√¨m c·ª≠a h√†ng c·ªßa manager
    const store = await Store.findOne({ manager: managerId });
    if (!store) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho manager n√†y"
      });
    }

    // T√¨m ƒë∆°n h√†ng
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
      });
    }

    // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ thu·ªôc c·ª≠a h√†ng c·ªßa manager kh√¥ng
    if (order.storeId.toString() !== store._id.toString()) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n h√†ng n√†y"
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i - ch·ªâ ƒë∆∞·ª£c h·ªßy khi ƒëang ·ªü tr·∫°ng th√°i "finding_driver"
    if (order.status !== "finding_driver") {
      return res.status(400).json({
        success: false,
        message: `Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng khi ƒëang ·ªü tr·∫°ng th√°i "ƒêang t√¨m t√†i x·∫ø". Tr·∫°ng th√°i hi·ªán t·∫°i: ${order.status}`
      });
    }

    // L∆∞u tr·∫°ng th√°i c≈©
    const oldStatus = order.status;
    const oldPaymentStatus = order.paymentStatus;

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh cancelled
    order.status = "cancelled";
    order.paymentStatus = "failed"; // Ho√†n ti·ªÅn n·∫øu ƒë√£ thanh to√°n

    // Th√™m v√†o l·ªãch s·ª≠ v·ªõi l√Ω do h·ªßy
    order.statusHistory.push({
      status: "cancelled",
      paymentStatus: "failed",
      timestamp: new Date(),
      note: `ƒê∆°n h√†ng b·ªã h·ªßy: ${reason}`,
      updatedBy: managerId
    });

    await order.save();

    // TODO: G·ª≠i th√¥ng b√°o cho kh√°ch h√†ng v·ªÅ vi·ªác h·ªßy ƒë∆°n h√†ng

    res.status(200).json({
      success: true,
      message: "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng",
      data: {
        orderId: order._id,
        orderNumber: order.orderNumber,
        oldStatus,
        newStatus: "cancelled",
        oldPaymentStatus,
        newPaymentStatus: "failed",
        reason: reason,
        cancelledAt: new Date()
      }
    });
  } catch (error) {
    console.error("L·ªói khi h·ªßy ƒë∆°n h√†ng:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi h·ªßy ƒë∆°n h√†ng",
      error: error.message
    });
  }
};

//! L·∫•y l·ªãch s·ª≠ tr·∫°ng th√°i ƒë∆°n h√†ng - FIXED v·ªõi deduplication m·∫°nh
export const getOrderStatusHistory = async (req, res) => {
    try {
      const { orderId } = req.params;
      const managerId = req.user.userId || req.user._id;
  
      // T√¨m c·ª≠a h√†ng c·ªßa manager
      const store = await Store.findOne({ manager: managerId });
      if (!store) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho manager n√†y"
        });
      }
  
      // T√¨m ƒë∆°n h√†ng
      const order = await Order.findById(orderId)
        .select("orderNumber status paymentStatus statusHistory storeId")
        .populate("statusHistory.updatedBy", "name email")
        .lean();
  
      if (!order) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
        });
      }
  
      // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ thu·ªôc c·ª≠a h√†ng c·ªßa manager kh√¥ng
      if (order.storeId.toString() !== store._id.toString()) {
        return res.status(403).json({
          success: false,
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªãch s·ª≠ ƒë∆°n h√†ng n√†y"
        });
      }
  
      // ‚úÖ DEDUPLICATION M·∫†NH - LO·∫†I B·ªé C√ÅC B·∫¢N GHI H·ªÜ TH·ªêNG T·ª∞ ƒê·ªòNG
      const uniqueHistoryMap = new Map();
      
      order.statusHistory.forEach(history => {
        // L√†m tr√≤n timestamp ƒë·∫øn 10 gi√¢y ƒë·ªÉ nh√≥m c√°c b·∫£n ghi g·∫ßn nhau
        const roundedTimestamp = new Date(history.timestamp);
        roundedTimestamp.setSeconds(Math.floor(roundedTimestamp.getSeconds() / 10) * 10);
        roundedTimestamp.setMilliseconds(0);
        
        const timestampKey = roundedTimestamp.getTime();
        const key = `${timestampKey}-${history.status}-${history.paymentStatus}`;
        
        if (!uniqueHistoryMap.has(key)) {
          uniqueHistoryMap.set(key, history);
        } else {
          // N·∫øu ƒë√£ t·ªìn t·∫°i, ∆∞u ti√™n theo th·ª© t·ª±:
          const existing = uniqueHistoryMap.get(key);
          
          // 1. ∆Øu ti√™n b·∫£n ghi c√≥ updatedBy (manager th·ª±c hi·ªán)
          if (!existing.updatedBy && history.updatedBy) {
            uniqueHistoryMap.set(key, history);
          } 
          // 2. ∆Øu ti√™n b·∫£n ghi kh√¥ng ph·∫£i l√† "Status changed to..." (h·ªá th·ªëng t·ª± ƒë·ªông)
          else if (existing.note?.includes("Status changed to") && !history.note?.includes("Status changed to")) {
            uniqueHistoryMap.set(key, history);
          }
          // 3. ∆Øu ti√™n b·∫£n ghi c√≥ note d√†i h∆°n (th∆∞·ªùng ch·ª©a nhi·ªÅu th√¥ng tin h∆°n)
          else if (history.note?.length > existing.note?.length) {
            uniqueHistoryMap.set(key, history);
          }
        }
      });
  
      // Chuy·ªÉn Map th√†nh array v√† s·∫Øp x·∫øp theo th·ªùi gian
      const uniqueHistory = Array.from(uniqueHistoryMap.values())
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
  
      console.log(`üìä Order ${orderId}: ${order.statusHistory.length} -> ${uniqueHistory.length} records after deduplication`);
  
      res.status(200).json({
        success: true,
        message: "L·∫•y l·ªãch s·ª≠ tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng",
        data: {
          orderId: order._id,
          orderNumber: order.orderNumber,
          currentStatus: order.status,
          currentPaymentStatus: order.paymentStatus,
          history: uniqueHistory,
          originalCount: order.statusHistory.length,
          uniqueCount: uniqueHistory.length
        }
      });
    } catch (error) {
      console.error("L·ªói khi l·∫•y l·ªãch s·ª≠ tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi l·∫•y l·ªãch s·ª≠ tr·∫°ng th√°i ƒë∆°n h√†ng",
        error: error.message
      });
    }
  };

  //! Cleanup l·ªãch s·ª≠ - X√ìA C√ÅC B·∫¢N GHI H·ªÜ TH·ªêNG T·ª∞ ƒê·ªòNG
export const cleanupOrderHistory = async (req, res) => {
    try {
      const managerId = req.user.userId || req.user._id;
  
      const store = await Store.findOne({ manager: managerId });
      if (!store) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho manager n√†y"
        });
      }
  
      const orders = await Order.find({ storeId: store._id });
      let totalCleaned = 0;
      let processedOrders = 0;
  
      for (const order of orders) {
        const originalCount = order.statusHistory.length;
        
        if (originalCount === 0) {
          processedOrders++;
          continue;
        }
  
        // ‚úÖ LO·∫†I B·ªé B·∫¢N GHI H·ªÜ TH·ªêNG T·ª∞ ƒê·ªòNG
        const cleanedHistory = [];
        const seenKeys = new Set();
        
        order.statusHistory.forEach(history => {
          const roundedTimestamp = new Date(history.timestamp);
          roundedTimestamp.setSeconds(Math.floor(roundedTimestamp.getSeconds() / 10) * 10);
          roundedTimestamp.setMilliseconds(0);
          
          const key = `${roundedTimestamp.getTime()}-${history.status}-${history.paymentStatus}`;
          
          // B·ªè qua b·∫£n ghi h·ªá th·ªëng t·ª± ƒë·ªông n·∫øu ƒë√£ c√≥ b·∫£n ghi manager
          if (history.note?.includes("Status changed to") && seenKeys.has(key)) {
            return; // B·ªè qua b·∫£n ghi h·ªá th·ªëng t·ª± ƒë·ªông
          }
          
          if (!seenKeys.has(key)) {
            cleanedHistory.push(history);
            seenKeys.add(key);
          }
        });
  
        // S·∫Øp x·∫øp
        const sortedHistory = cleanedHistory.sort((a, b) => 
          new Date(b.timestamp) - new Date(a.timestamp)
        );
  
        // C·∫≠p nh·∫≠t n·∫øu c√≥ thay ƒë·ªïi
        if (sortedHistory.length !== originalCount) {
          order.statusHistory = sortedHistory;
          await order.save();
          totalCleaned += (originalCount - sortedHistory.length);
          console.log(`üßπ Order ${order.orderNumber}: ${originalCount} -> ${sortedHistory.length} records`);
        }
        
        processedOrders++;
      }
  
      res.status(200).json({
        success: true,
        message: `Cleanup th√†nh c√¥ng. ƒê√£ x·ª≠ l√Ω ${processedOrders} ƒë∆°n h√†ng, x√≥a ${totalCleaned} b·∫£n ghi h·ªá th·ªëng t·ª± ƒë·ªông.`,
        data: {
          storeId: store._id,
          totalOrders: orders.length,
          processedOrders,
          totalCleanedRecords: totalCleaned
        }
      });
    } catch (error) {
      console.error("L·ªói khi cleanup l·ªãch s·ª≠ ƒë∆°n h√†ng:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi cleanup l·ªãch s·ª≠ ƒë∆°n h√†ng",
        error: error.message
      });
    }
  };